pipeline {
  agent any

  environment {
    // change to your Docker Hub username
    DOCKER_IMAGE       = "vuongnt25/bookreview-backend:${env.GIT_COMMIT}"
    DOCKER_IMAGE_PROD  = "vuongnt25/bookreview-backend:prod"

    // Jenkins credentials you already created
    SONAR_TOKEN        = credentials('SONAR_TOKEN')   // you named it SONAR_TOKEN

    // SonarQube URL (adjust if different)
    SONAR_HOST_URL     = "http://host.docker.internal:9000"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('SetEnv') {
      steps {
        script {
          env.DOCKER_IMAGE      = "vuongnt25/bookreview-backend:${GIT_COMMIT}"
          env.DOCKER_IMAGE_PROD = "vuongnt25/bookreview-backend:prod"
          echo "üì¶ DOCKER_IMAGE set to: ${env.DOCKER_IMAGE}"
        }
      }
    }

    stage('Check DockerHub Credentials') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub',
                                          usernameVariable: 'DOCKERHUB_USER',
                                          passwordVariable: 'DOCKERHUB_PASS')]) {
          powershell '''
            Write-Host "DOCKERHUB_USER: $env:DOCKERHUB_USER"
            Write-Host "Password length: $($env:DOCKERHUB_PASS.Length)"

            docker login -u $env:DOCKERHUB_USER -p $env:DOCKERHUB_PASS
            if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå Docker login failed ‚Äì check username/token"
            } else {
              Write-Host "‚úÖ Docker login succeeded as $env:DOCKERHUB_USER"
            }

            docker logout | Out-Null
          '''
        }
      }
    }

    stage('Build') {
      steps {
        powershell '''
          docker build -t "$env:DOCKER_IMAGE" backend
          docker images | findstr bookreview-backend
        '''
      }
    }

    stage('Test') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          docker run --rm `
            -v "${env:WORKSPACE}:/workspace" `
            -w /workspace/backend `
            python:3.11-slim bash -lc "
              export PYTHONPATH=/workspace/backend &&
              python -m pip install --upgrade pip &&
              pip install --no-cache-dir -r requirements.txt &&
              pytest -q
            "
        '''
      }
    }

    stage('CodeQuality') {
      steps {
        dir('backend') {
          powershell '''
            $ErrorActionPreference = "Stop"
            docker run --rm `
              -e SONAR_HOST_URL="$env:SONAR_HOST_URL" `
              -e SONAR_TOKEN="$env:SONAR_TOKEN" `
              -v "${env:WORKSPACE}\\backend:/usr/src" `
              sonarsource/sonar-scanner-cli
          '''
        }
      }
    }

    stage('PushImage') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub',
                                          usernameVariable: 'DOCKERHUB_USER',
                                          passwordVariable: 'DOCKERHUB_PASS')]) {
          powershell '''
            $ErrorActionPreference = "Stop"
            docker login -u $env:DOCKERHUB_USER -p $env:DOCKERHUB_PASS
            if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå Docker login failed ‚Äì check username/token"
            } else {
              Write-Host "‚úÖ Docker login succeeded as $env:DOCKERHUB_USER"
            }

            docker tag "$env:DOCKER_IMAGE" "vuongnt25/bookreview-backend:${env.GIT_COMMIT}"
            docker push "vuongnt25/bookreview-backend:${env.GIT_COMMIT}"

            docker tag "$env:DOCKER_IMAGE" "vuongnt25/bookreview-backend:latest"
            docker push "vuongnt25/bookreview-backend:latest"

            docker logout | Out-Null
          '''
        }
      }
    }

   stage('Security') {
  steps {
    powershell '''
      $ErrorActionPreference = "Stop"

      trivy image `
        --severity HIGH,CRITICAL `
        --ignore-unfixed `
        --exit-code 1 `
        "$env:DOCKER_IMAGE"
    '''
  }
}



    stage('Deploy:Staging') {
  steps {
    powershell '''
      docker compose down || echo "No containers to stop"
      docker compose up -d --build
      (Invoke-WebRequest -UseBasicParsing http://localhost:9001/health).Content | Write-Host
    '''
  }
}


    stage('Release') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub',
                                          usernameVariable: 'DOCKERHUB_USER',
                                          passwordVariable: 'DOCKERHUB_PASS')]) {
          powershell '''
            $ErrorActionPreference = "Stop"
            docker login -u $env:DOCKERHUB_USER -p $env:DOCKERHUB_PASS
            if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå Docker login failed ‚Äì check username/token"
            } else {
              Write-Host "‚úÖ Docker login succeeded as $env:DOCKERHUB_USER"
            }

            docker tag "$env:DOCKER_IMAGE" "$env:DOCKER_IMAGE_PROD"
            docker push "$env:DOCKER_IMAGE_PROD"

            docker logout | Out-Null
          '''
        }
      }
    }

    stage('Monitoring') {
      steps {
        powershell '''
          docker compose -f monitoring/docker-compose.monitor.yml up -d
          (Invoke-WebRequest -UseBasicParsing http://localhost:8000/metrics).Content.Split("`n")[0..4] -join "`n" | Write-Host
        '''
      }
    }
  }
}
