pipeline {
  agent any

  environment {
    // change to your Docker Hub username
    DOCKER_IMAGE       = "vuongnt25/bookreview-backend:${env.GIT_COMMIT}"
    DOCKER_IMAGE_PROD  = "vuongnt25/bookreview-backend:prod"

    // Jenkins credentials you already created
    SONAR_TOKEN        = credentials('SONAR_TOKEN')   // you named it SONAR_TOKEN
    DOCKERHUB_CRED     = credentials('dockerhub')

    // SonarQube URL (adjust if different)
    SONAR_HOST_URL     = "http://host.docker.internal:9000"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build') {
      steps {
        powershell '''
          docker build -t "$env:DOCKER_IMAGE" backend
          docker images | findstr bookreview-backend
        '''
      }
    }

    stage('Test') {
  steps {
    powershell '''
      $ErrorActionPreference = "Stop"
      docker run --rm `
        -v "${env:WORKSPACE}:/workspace" `
        -w /workspace/backend `
        python:3.11-slim bash -lc "
          export PYTHONPATH=/workspace/backend &&
          python -m pip install --upgrade pip &&
          pip install --no-cache-dir -r requirements.txt &&
          pytest -q
        "
    '''
  }
}


    stage('CodeQuality') {
      steps {
        dir('backend') {
          powershell '''
            $ErrorActionPreference = "Stop"
            # use scanner in a Docker container; mount this folder
            docker run --rm `
              -e SONAR_HOST_URL="$env:SONAR_HOST_URL" `
              -e SONAR_TOKEN="$env:SONAR_TOKEN" `
              -v "${env:WORKSPACE}\\backend:/usr/src" `
              sonarsource/sonar-scanner-cli
          '''
        }
      }
    }

   stage('Security') {
    steps {
      powershell '''
  $ErrorActionPreference = "Stop"

  docker run --rm `
    -v "${env:WORKSPACE}\\backend:/project" `
    -v "$env:USERPROFILE\\.cache\\trivy:/root/.cache/" `
    aquasec/trivy:latest fs /project `
    --scanners vuln `
    --skip-dirs .venv,.pytest_cache `
    --timeout 10m `
    --ignore-unfixed `
    --severity HIGH,CRITICAL `
    --exit-code 1
'''
    }
  }



    stage('PushImage') {
  steps {
    withCredentials([usernamePassword(credentialsId: 'dockerhub',
                                      usernameVariable: 'DOCKERHUB_USER',
                                      passwordVariable: 'DOCKERHUB_PASS')]) {
      powershell '''
        $ErrorActionPreference = "Stop"
        docker logout | Out-Null
        $env:DOCKERHUB_PASS | docker login -u $env:DOCKERHUB_USER --password-stdin
        docker tag "$env:DOCKER_IMAGE" "vuongnt25/bookreview-backend:${env.GIT_COMMIT}"
        docker push "vuongnt25/bookreview-backend:${env.GIT_COMMIT}"
        docker tag "$env:DOCKER_IMAGE" "vuongnt25/bookreview-backend:latest"
        docker push "vuongnt25/bookreview-backend:latest"
        docker logout | Out-Null
      '''
    }
  }
}

    stage('Deploy:Staging') {
      steps {
        powershell '''
          docker compose up -d --build
          # health check using PowerShell's web cmdlets
          (Invoke-WebRequest -UseBasicParsing http://localhost:8000/health).Content | Write-Host
        '''
      }
    }

    stage('Release') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          docker tag "$env:DOCKER_IMAGE" "$env:DOCKER_IMAGE_PROD"
          $user = $env:DOCKERHUB_CRED_USR
          $pass = $env:DOCKERHUB_CRED_PSW
          $pass | docker login -u $user --password-stdin
          docker push "$env:DOCKER_IMAGE_PROD"
        '''
      }
    }

    stage('Monitoring') {
      steps {
        powershell '''
          docker compose -f monitoring/docker-compose.monitor.yml up -d
          (Invoke-WebRequest -UseBasicParsing http://localhost:8000/metrics).Content.Split("`n")[0..4] -join "`n" | Write-Host
        '''
      }
    }
  }
}
